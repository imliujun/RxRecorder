package com.imliujun.recorder.mp3import android.annotation.SuppressLintimport android.content.Contextimport android.media.AudioAttributesimport android.media.AudioFocusRequestimport android.media.AudioManagerimport android.os.Buildimport timber.log.Timberimport java.util.concurrent.CopyOnWriteArraySet/** * 项目名称：RxAudioRecorder * 类描述： * 创建人：liujun * 创建时间：2019-11-28 16:42 * 修改人：liujun * 修改时间：2019-11-28 16:42 * 修改备注： * @version */object AudioManagerUtils {    private var audioManager: AudioManager? = null    private var audioFocusRequest: AudioFocusRequest? = null    private var hasAudioFocus = false //是否有音频焦点    private var focusChangeListeners =        CopyOnWriteArraySet<AudioManager.OnAudioFocusChangeListener>()    /**     * 开始播放或者录音时，先请求音频焦点，如果请求成功才开始播放或录音     *     * @return true：获取焦点成功    false：获取焦点失败     */    @Synchronized    fun requestFocus(listener: AudioManager.OnAudioFocusChangeListener?): Boolean {        //        Timber.i("requestFocus hasAudioFocus:$hasAudioFocus")        if (listener != null) {            focusChangeListeners.add(listener)        }        if (hasAudioFocus) {            return hasAudioFocus        }        if (audioManager == null) {            audioManager =                RecordUtils.context.getSystemService(Context.AUDIO_SERVICE) as AudioManager        }        val focusRequest = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            if (audioFocusRequest == null) {                val audioAttributes = AudioAttributes.Builder()                    .setUsage(AudioAttributes.USAGE_MEDIA)                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)                    .build()                audioFocusRequest = AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)                    .setAudioAttributes(audioAttributes)                    .setOnAudioFocusChangeListener(this::onAudioFocusChange)                    .build()            }            audioFocusRequest?.let {                audioManager?.requestAudioFocus(it)            }        } else {            audioManager?.requestAudioFocus(                this::onAudioFocusChange,                AudioManager.STREAM_MUSIC,                AudioManager.AUDIOFOCUS_GAIN            )        }        return when (focusRequest) {            AudioManager.AUDIOFOCUS_REQUEST_FAILED -> {                // 不允许播放                Timber.e("获取音频焦点失败")                hasAudioFocus = false                hasAudioFocus            }            AudioManager.AUDIOFOCUS_REQUEST_GRANTED -> {                // 开始播放                Timber.i("获取音频焦点成功")                hasAudioFocus = true                hasAudioFocus            }            else -> {                hasAudioFocus = true                hasAudioFocus            }        }    }    private fun onAudioFocusChange(focusChange: Int) {        hasAudioFocus = focusChange != AudioManager.AUDIOFOCUS_LOSS        focusChangeListeners.forEach { it.onAudioFocusChange(focusChange) }    }    /**     * 收到音频焦点的回调，永久丢失焦点了，移除回调监听     */    fun removeListeners(listener: AudioManager.OnAudioFocusChangeListener?) {        Timber.i("removeListeners size:${focusChangeListeners.size} listener:$listener")        if (listener != null) {            val remove = focusChangeListeners.remove(listener)            if (remove) {                if (focusChangeListeners.isEmpty()) {                    abandonAudioFocus()                }            }        }    }    /**     * 一段时间内不会再使用音频模块了，主动调用本方法释放焦点     */    private fun abandonAudioFocus() {        Timber.i("abandonAudioFocus hasAudioFocus:$hasAudioFocus")        if (!hasAudioFocus) return        hasAudioFocus = false        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            audioFocusRequest?.let {                audioManager?.abandonAudioFocusRequest(it)                audioFocusRequest = null            }        } else {            audioManager?.abandonAudioFocus(this::onAudioFocusChange)        }        audioManager = null    }}